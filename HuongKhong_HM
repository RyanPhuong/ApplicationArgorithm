{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMD+534sEXXcVJ/FZsXoDz/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RyanPhuong/ApplicationArgorithm/blob/master/HuongKhong_HM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lf_OENIZSkJB"
      },
      "source": [
        "import matplotlib as plt\n",
        "import pandas as pd\n",
        "A = pd.read_excel('chungcu.xlsx')\n",
        "A = A.drop(\"STT\", axis = 1)\n",
        "print(A.head())\n",
        "X =A.drop(\"Tong\", axis = 1)\n",
        "print(X.head())\n",
        "Y =A[\"Tong\"]\n",
        "print(Y.head())\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NxcAjFfVYo3T",
        "outputId": "e51fd37a-805f-444e-824b-5764b54853ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "source": [
        "Xtrain = X.iloc[0:15]\n",
        "Ytrain = Y.iloc[0:15]\n",
        "from sklearn import linear_model\n",
        "clf = linear_model.LinearRegression()\n",
        "clf.fit(Xtrain, Ytrain)\n",
        "print(pd.DataFrame({\"Name\": Xtrain.columns,\"Coefficients\":clf.coef_}).sort_values(by='Coefficients') )\n",
        "print(clf.intercept_)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "           Name  Coefficients\n",
            "2     Tim Tuong  14576.949820\n",
            "1    Thong thuy  14672.217582\n",
            "0          Tang  23373.095775\n",
            "3  So phong ngu  28949.421883\n",
            "-207369.38570574299\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zgBfpca8bCOs"
      },
      "source": [
        "from sklearn import linear_model\n",
        "import numpy as np\n",
        "clf = linear_model.LinearRegression()\n",
        "data = A.apply(lambda x: (x - np.mean(x)) / (np.max(x) - np.min(x)))\n",
        "X_norm = data.drop(\"Tong\", axis=1)\n",
        "print(X_norm.head())\n",
        "Y_norm = data[\"Tong\"]\n",
        "print(Y_norm.head())\n",
        "clf.fit(X_norm, Y_norm)\n",
        " \n",
        "print(pd.DataFrame({\"Name\":X_norm.columns, \"Coefficients\":np.abs(clf.coef_)}).sort_values(by='Coefficients') )\n",
        " \n",
        "print(clf.intercept_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SbvAyNQjeyB6",
        "outputId": "518204c2-fca1-41be-bbb5-0c0dd458c3f3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        }
      },
      "source": [
        "import numpy as np\n",
        "A = pd.read_excel('chungcu.xlsx')\n",
        "A = A.drop(\"STT\", axis = 1)\n",
        "f = A[\"Tang\"]\n",
        "f = np.asmatrix(f).T\n",
        "y = np.asmatrix(Y).T\n",
        "one = np.ones((f.shape[0], 1))\n",
        "Xbar = np.concatenate((one, f), axis = 1)\n",
        "A = np.dot(Xbar.T, Xbar)\n",
        "b = np.dot(Xbar.T, y)\n",
        "w = np.dot(np.linalg.pinv(A), b)\n",
        "w_0 = w[0][0]\n",
        "w_1 = w[1][0]\n",
        "x0 = np.linspace(1, 10, 1)\n",
        "y0 = w_0 + w_1*x0\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(f, y, 'ro')            \n",
        "plt.plot(f.T, y.T, 'bo')   \n",
        "plt.plot(x0, y0)           \n",
        "plt.axis([1, 10, 2000000, 4000000])\n",
        "plt.xlabel('Tang')\n",
        "plt.ylabel('Tien')\n",
        "plt.show()"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_0qg3TT6smzt",
        "outputId": "87fe50c2-b295-4b86-e233-41e85dfb382d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        }
      },
      "source": [
        "import numpy as np\n",
        "A = pd.read_excel('chungcu.xlsx')\n",
        "A = A.drop(\"STT\", axis = 1)\n",
        "S = A[\"Thong thuy\"]\n",
        "S = np.asmatrix(S).T\n",
        "y = np.asmatrix(Y).T\n",
        "one = np.ones((f.shape[0], 1))\n",
        "Xbar = np.concatenate((one, S), axis = 1)\n",
        "A = np.dot(Xbar.T, Xbar)\n",
        "b = np.dot(Xbar.T, y)\n",
        "w = np.dot(np.linalg.pinv(A), b)\n",
        "w_0 = w[0][0]\n",
        "w_1 = w[1][0]\n",
        "x0 = np.linspace(1, 10, 1)\n",
        "y0 = w_0 + w_1*x0\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(S, y, 'ro')            \n",
        "plt.plot(S.T, y.T, 'bo')   \n",
        "plt.plot(x0, y0)           \n",
        "plt.axis([50, 150, 2000000, 4000000])\n",
        "plt.xlabel('Thong thuy')\n",
        "plt.ylabel('Tien')\n",
        "plt.show()"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}